/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define LOWER 1
#define RAISE 2
#define ADJUST 3
#define NUMBERS 4
#define BT0 BT_SEL 0
#define BT1 BT_SEL 1
#define BT2 BT_SEL 2
#define BT3 BT_SEL 3
#define BT4 BT_SEL 4

&mt { retro-tap; };

&sk {
    //release-after-ms = <2000>;

    quick-release;

    // /delete-property/ ignore-modifiers;
};

&lt {
    flavor = "hold-preferred";
    quick-tap-ms = <150>;
};

/ {
    conditional_layers { compatible = "zmk,conditional-layers"; };

    combos {
        compatible = "zmk,combos";

        backslash {
            bindings = <&kp BACKSLASH>;
            key-positions = <4 17>;
            timeout-ms = <30>;
        };

        left_bkt {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <4 5>;
            timeout-ms = <30>;
        };

        right_bkt {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <6 7>;
            timeout-ms = <30>;
        };

        pipe {
            bindings = <&kp PIPE>;
            key-positions = <6 18>;
            timeout-ms = <30>;
        };

        left_brace {
            bindings = <&kp LEFT_BRACE>;
            key-positions = <29 28>;
            timeout-ms = <30>;
        };

        right_brace {
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <30 31>;
            timeout-ms = <30>;
        };

        left_par {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <16 17>;
            timeout-ms = <30>;
        };

        right_par {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <18 19>;
            timeout-ms = <30>;
        };

        enter {
            bindings = <&kp ENTER>;
            key-positions = <3 4>;
            timeout-ms = <30>;
        };

        back {
            bindings = <&kp BACKSPACE>;
            key-positions = <7 8>;
            timeout-ms = <30>;
        };

        del {
            bindings = <&kp DELETE>;
            key-positions = <8 9>;
            timeout-ms = <30>;
        };

        esc {
            bindings = <&kp ESCAPE>;
            key-positions = <3 2>;
            timeout-ms = <30>;
        };

        tab {
            bindings = <&kp TAB>;
            key-positions = <14 15>;
            timeout-ms = <30>;
        };

        repeat {
            bindings = <&kp C_REPEAT>;
            key-positions = <15 16>;
            timeout-ms = <30>;
        };

        copy {
            bindings = <&kp LG(C)>;
            key-positions = <27 26>;
            timeout-ms = <30>;
        };

        paste {
            bindings = <&kp LG(V)>;
            key-positions = <27 28>;
            timeout-ms = <30>;
        };
    };

    behaviors {
        hm: hm {
            compatible = "zmk,behavior-hold-tap";
            label = "HM";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <180>;
            flavor = "tap-preferred";
            retro-tap;
        };

        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            label = "HML";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <36 37 38 39 40 41 9 21 10 22 34 33 32 20 8 7 19 31 30 18 6 5 17 29 28 27 26 25 1 2 3 4>;
        };

        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <1 13 25 26 14 2 3 15 27 28 16 4 5 17 29 30 6 18 36 37 37 38 39 40 41 7 8 9 10 31 32 33 34>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&trans  &kp Q            &kp W            &kp E         &kp R              &kp T      &kp Y      &kp U               &kp I            &kp O             &kp P                &trans
&trans  &hml LEFT_GUI A  &hml LEFT_ALT S  &hml LCTRL D  &hml LEFT_SHIFT F  &kp G      &kp H      &hmr RIGHT_SHIFT J  &hmr RCTRL K     &hmr RIGHT_ALT L  &hmr RIGHT_GUI SEMI  &trans
&trans  &kp Z            &kp X            &kp C         &kp V              &kp B      &kp N      &kp M               &kp COMMA        &kp DOT           &kp FSLH             &trans
                                          &kp LEFT_GUI  &lt 2 SPACE        &lt 1 TAB  &kp ENTER  &lt 2 BACKSPACE     &kp RIGHT_SHIFT
            >;
        };

        num {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&trans  &kp N1        &kp N2        &kp N3     &kp N4          &kp N5        &kp N6        &kp N7              &kp N8            &kp N9         &kp N0   &trans
&trans  &kp LEFT_GUI  &kp LEFT_ALT  &kp LCTRL  &kp LEFT_SHIFT  &kp CAPSLOCK  &kp LEFT      &kp DOWN            &kp UP            &kp RIGHT      &trans   &trans
&trans  &kp F1        &kp F2        &kp F3     &kp F4          &kp F5        &kp LG(LEFT)  &kp LG(DOWN_ARROW)  &kp LG(UP_ARROW)  &kp RG(RIGHT)  &kp F12  &trans
                                    &trans     &mo 3           &trans        &trans        &mo 3               &trans
            >;
        };

        sym {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | DEL  |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&trans  &kp EXCL          &kp AT             &kp HASH       &kp DLLR        &kp PRCNT        &kp CARET  &kp AMPS   &kp ASTERISK  &kp LPAR       &kp RPAR           &trans
&trans  &kp LEFT_GUI      &kp LEFT_ALT       &kp LCTRL      &kp LEFT_SHIFT  &kp CAPSLOCK     &kp PLUS   &kp MINUS  &kp GRAVE     &kp PIPE       &kp APOS           &trans
&trans  &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp LG(LA(C))  &kp LEFT_BRACE  &kp RIGHT_BRACE  &kp EQUAL  &kp UNDER  &kp TILDE     &kp BACKSLASH  &kp DOUBLE_QUOTES  &trans
                                             &trans         &trans          &trans           &trans     &trans     &trans
            >;
        };

        fun {
            bindings = <
&trans  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2       &bt BT_SEL 3  &bt BT_SEL 4  &trans  &trans  &trans  &trans  &trans       &trans
&trans  &trans        &trans        &kp C_VOLUME_UP    &trans        &trans        &trans  &trans  &trans  &trans  &trans       &trans
&trans  &bt BT_CLR    &trans        &kp C_VOLUME_DOWN  &trans        &trans        &trans  &trans  &trans  &trans  &bootloader  &trans
                                    &trans             &trans        &trans        &trans  &trans  &trans
            >;
        };
    };
};
